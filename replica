#!/bin/bash

TARGET=
SOURCEROOT=
DESTROOT=
LOGFILE=
VERBOSE=
EXTRAOPTIONS="--quiet"
STARTTIME=`date +%s`

function printhelp() {
cat << EOF
replica 0.1 by AndrÃ© Restivo (andre.restivo@gmail.com)

Usage: replica -d <destroot> [-s <sourceroot>] -t <target> [-v] [-b <logfile>]

	-d 	Directory where backups and log files will be created (unless -b is used.
	-s	Directory where source target can be found. Can be a remote location 
		using ssh. If source is a remote location we cannot verify if contents 
		have changed before executing the rsync command and a new directory will 
		always be created. Default: current directory.
	-t	Source target.
	-b 	Alternative log file.
	-v	Detailed output for testing
	-h	This help message.

Example: replica -d backups -s /home/johndoe/Documents/ -t work -v

	Creates an incremental backup of /home/johndoe/Documents/work in 
	./backups/work and stores the backup log in ./backups/.replica.log

Example: replica -d backups -s johndoe@work:~/Documents/ -t stuff -v -b backup.log

	Creates an incremental backup of /home/johndoe/Documents/stuff
	found at server work in ./backups/stuff and stores the backup log 
	in backup.log

EOF
}

while getopts "s:d:t:b:vh" option; do
	case "$option" in
		s) SOURCEROOT="$OPTARG";;
		d) DESTROOT="$OPTARG";;
		t) TARGET="$OPTARG";;
		b) LOGFILE="$OPTARG";;
		v) VERBOSE="0";;
		h) printhelp; exit 0;;
		\?) echo "Usage: replica -d <destroot> [-s <sourceroot>] -t <target> [-v]"; exit 1;;
	esac
done

if [ "$TARGET" == "" ]; then echo "Error: No target specified"; exit 1; fi
if [ "$DESTROOT" == "" ]; then echo "Error: No destination root specified"; exit 1; fi
if [ "$SOURCEROOT" == "" ]; then SOURCEROOT=`pwd`/; fi

#if [ ! -d "$SOURCEROOT" ]; then echo "Error: $SOURCEROOT is not a directory"; exit 1; fi
if [ ! -d "$DESTROOT" ]; then mkdir -p $DESTROOT; fi
if [ ! -d "$DESTROOT" ]; then echo "Error: $DESTROOT is not a directory"; exit 1; fi

#SOURCEROOT=`cd $SOURCEROOT; pwd`
DESTROOT=`cd $DESTROOT; pwd`

SOURCE=$SOURCEROOT/$TARGET/
DEST=$DESTROOT/$TARGET/

if [ "$VERBOSE" == "0" ]; then
	echo "$SOURCE -> $DEST"
	EXTRAOPTIONS="--verbose --progress"
fi

if [ "$LOGFILE" == "" ]; then
	LOGFILE=$DESTROOT/.replica.log
fi

#exit 0

if [ ! -d $DEST ]; then mkdir -p $DEST; fi

# Get current date
DATE=`date +%Y%m%d.%H%M%S`

# Get date of last backup
PREVIOUS=`find $DEST -maxdepth 1 -printf "%P\n" | grep "[0-9]\{8\}.[0-9]\{6\}" | sort | tail -1`

SHAOLD=`find $DEST$PREVIOUS -printf "%P %s \n" | sort | sha1sum`

if [[ $SOURCE != *@* ]]; then
	SHANEW=`find $SOURCE -printf "%P %s \n" | sort | sha1sum`
fi

if [ "$SHANEW" == "$SHAOLD" ]; then
	ENDTIME=`date +%s` ; TIMEELAPSED=$((ENDTIME - STARTTIME))
	SIZE=`du --si --summarize $DEST$PREVIOUS | awk '{print $1}'`
	echo "[$TARGET] $DATE ($SIZE): Nothing to be done ($TIMEELAPSED s)" >> $LOGFILE
	if [ "$VERBOSE" == "0" ]; then echo "Nothing to be done"; fi
	exit 0
fi

if [ "$VERBOSE" == "0" ]; then
	echo "rsync $EXTRAOPTIONS --inplace --archive --delete --link-dest $DEST$PREVIOUS/ $SOURCE $DEST$DATE.incomplete/"
fi

rsync $EXTRAOPTIONS --inplace --archive --delete --link-dest $DEST$PREVIOUS $SOURCE $DEST$DATE.incomplete/

if [ $? -eq 0 ]; then 
	ENDTIME=`date +%s` ; TIMEELAPSED=$((ENDTIME - STARTTIME))
	mv $DEST$DATE.incomplete $DEST$DATE
	SIZE=`du --si --summarize $DEST$DATE | awk '{print $1}'`
	if [ "$PREVIOUS" != "" ]; then 
		echo "[$TARGET] $DATE ($SIZE): Incremental backup from $PREVIOUS complete ($TIMEELAPSED s)" >> $LOGFILE
	else
		echo "[$TARGET] $DATE ($SIZE): Full backup complete ($TIMEELAPSED s)" >> $LOGFILE
	fi
else
	ENDTIME=`date +%s` ; TIMEELAPSED=$((ENDTIME - STARTTIME))
	SIZE=`du --si --summarize $DEST$DATE.incomplete | awk '{print $1}'`
	echo "[$TARGET] $DATE ($SIZE): Failed backup ($TIMEELAPSED s)" >> $LOGFILE
fi